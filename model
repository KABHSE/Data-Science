import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error
import pickle

# Загрузка данных
data = pd.read_csv('move.csv')

# Удаление переменной 'metro'
X = data.drop(columns=['Unnamed: 0', 'price', 'metro'])
y = data['price']

# Определение категориальных и числовых признаков
categorical_columns = ['way', 'provider']
numerical_columns = ['views', 'fee_percent', 'storey', 'minutes', 'storeys', 'living_area', 'kitchen_area', 'total_area']

# Преобразование числовых признаков
numerical_transformer = StandardScaler()

# Преобразование категориальных признаков
categorical_transformer = OneHotEncoder(handle_unknown='ignore')

# Объединение преобразователей
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, numerical_columns),
        ('cat', categorical_transformer, categorical_columns)
    ])

# Создание пайплайна
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', GradientBoostingRegressor(random_state=42))
])

# Разделение данных на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Определение параметров для Randomized Search
param_dist_gb = {
    'regressor__n_estimators': [100, 200],
    'regressor__learning_rate': [0.01, 0.1],
    'regressor__max_depth': [3, 5],
    'regressor__min_samples_split': [2, 5],
    'regressor__min_samples_leaf': [1, 2]
}

# Инициализация Randomized Search
random_search_gb = RandomizedSearchCV(pipeline, param_distributions=param_dist_gb, n_iter=10, cv=5, scoring='neg_mean_squared_error', n_jobs=-1, random_state=42)

# Обучение модели
random_search_gb.fit(X_train, y_train)

# Предсказания на тестовом наборе
y_pred_gb = random_search_gb.predict(X_test)

# Вычисление MSE и RMSE
mse_gb = mean_squared_error(y_test, y_pred_gb)
rmse_gb = mse_gb ** 0.5

# Вывод результатов
best_params_gb = random_search_gb.best_params_
results_gb = {'Best Params': best_params_gb, 'MSE': mse_gb, 'RMSE': rmse_gb}
print(results_gb)

# Сохранение модели в файл
with open('model.pkl', 'wb') as file:
    pickle.dump(random_search_gb.best_estimator_, file)
